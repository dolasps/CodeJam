package org.example;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

public class SpringBootMicroserviceGenerator {

    public static void main(String[] args) throws IOException {
        Scanner scanner = new Scanner(System.in);

        // Input: Project details
        System.out.println("Enter the name of the microservice project:");
        String projectName = scanner.nextLine();

        System.out.println("Enter the base package name (e.g., com.example.service):");
        String basePackage = scanner.nextLine();

        System.out.println("Choose database (H2/MySQL/PostgreSQL):");
        String database = scanner.nextLine().toLowerCase();

        System.out.println("How many domain classes do you want to create?");
        int domainCount = Integer.parseInt(scanner.nextLine());

        String projectPath = System.getProperty("user.dir") + File.separator + projectName;
        String mainPath = projectPath + "/src/main/java/" + basePackage.replace(".", "/");
        String testPath = projectPath + "/src/test/java/" + basePackage.replace(".", "/");
        String resourcesPath = projectPath + "/src/main/resources";

        // Create basic project structure
        createDirectories(projectPath, mainPath, testPath, resourcesPath);
        createPomXml(projectPath, projectName, database);
        createApplicationProperties(resourcesPath, database);
        createMainApplicationClass(mainPath, projectName, basePackage);
        createDockerfile(projectPath);

        // Generate domain classes and related files
        for (int i = 1; i <= domainCount; i++) {
            System.out.println("Enter the name of domain class " + i + ":");
            String domainClassName = scanner.nextLine();

            System.out.println("Do you want to create a Controller for " + domainClassName + "? (yes/no):");
            boolean createController = scanner.nextLine().equalsIgnoreCase("yes");

            System.out.println("Do you want to create a Service for " + domainClassName + "? (yes/no):");
            boolean createService = scanner.nextLine().equalsIgnoreCase("yes");

            System.out.println("Do you want to create a Repository for " + domainClassName + "? (yes/no):");
            boolean createRepository = scanner.nextLine().equalsIgnoreCase("yes");

            System.out.println("How many properties for " + domainClassName + "?");
            int propertyCount = Integer.parseInt(scanner.nextLine());

            StringBuilder properties = new StringBuilder();
            for (int j = 1; j <= propertyCount; j++) {
                System.out.println("Enter type of property " + j + " (e.g., String, int):");
                String type = scanner.nextLine();
                System.out.println("Enter name of property " + j + ":");
                String name = scanner.nextLine();
                properties.append(String.format("    private %s %s;%n", type, name));
            }

            createDomainClass(mainPath + "/model", basePackage, domainClassName, properties.toString());
            if (createRepository) createRepositoryClass(mainPath + "/repository", basePackage, domainClassName);
            if (createService) createServiceClass(mainPath + "/service", basePackage, domainClassName);
            if (createController) createControllerClass(mainPath + "/controller", basePackage, domainClassName);
            if (createController) createTestClass(testPath + "/controller", basePackage, domainClassName);
        }

        System.out.println("Spring Boot Microservice project generated and containerized successfully!");
    }

    private static void createPomXml(String path, String projectName, String database) {
        String dbDependency = switch (database) {
            case "mysql" -> "<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n</dependency>";
            case "postgresql" -> "<dependency>\n    <groupId>org.postgresql</groupId>\n    <artifactId>postgresql</artifactId>\n</dependency>";
            default -> "<dependency>\n    <groupId>com.h2database</groupId>\n    <artifactId>h2</artifactId>\n</dependency>";
        };

        String content = """
                <?xml version="1.0" encoding="UTF-8"?>
                <project xmlns="http://maven.apache.org/POM/4.0.0">
                    <modelVersion>4.0.0</modelVersion>
                    <groupId>com.example</groupId>
                    <artifactId>%s</artifactId>
                    <version>0.0.1-SNAPSHOT</version>
                    <parent>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-parent</artifactId>
                        <version>2.7.15</version>
                    </parent>
                    <dependencies>
                        <dependency>
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-starter-web</artifactId>
                        </dependency>
                        <dependency>
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-starter-data-jpa</artifactId>
                        </dependency>
                        <dependency>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <optional>true</optional>
                        </dependency>
                        <dependency>
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-starter-test</artifactId>
                            <scope>test</scope>
                        </dependency>
                        %s
                    </dependencies>
                </project>""".formatted(projectName, dbDependency);
        writeFile(path + "/pom.xml", content);
    }

    private static void createDockerfile(String path) {
        String content = """
                FROM openjdk:17-jdk-slim
                WORKDIR /app
                COPY ./target/*.jar app.jar
                EXPOSE 8080
                ENTRYPOINT ["java", "-jar", "app.jar"]
                """;
        writeFile(path + "/Dockerfile", content);
    }

    private static void createApplicationProperties(String path, String database) {
        String dbProperties = switch (database) {
            case "mysql" -> "spring.datasource.url=jdbc:mysql://localhost:3306/testdb\nspring.datasource.username=root\nspring.datasource.password=root\n";
            case "postgresql" -> "spring.datasource.url=jdbc:postgresql://localhost:5432/testdb\nspring.datasource.username=postgres\nspring.datasource.password=postgres\n";
            default -> "spring.datasource.url=jdbc:h2:mem:testdb\nspring.datasource.driverClassName=org.h2.Driver\nspring.datasource.username=sa\nspring.datasource.password=\n";
        };
        String content = "server.port=8080\nspring.h2.console.enabled=true\nspring.jpa.hibernate.ddl-auto=update\nspring.jpa.show-sql=true\n" + dbProperties;
        writeFile(path + "/application.properties", content);
    }

    private static void createMainApplicationClass(String path, String projectName, String basePackage) {
        String className = projectName.substring(0, 1).toUpperCase() + projectName.substring(1) + "Application";
        String content = "package " + basePackage + ";\n\n" +
                "import org.springframework.boot.SpringApplication;\n" +
                "import org.springframework.boot.autoconfigure.SpringBootApplication;\n\n" +
                "@SpringBootApplication\n" +
                "public class " + className + " {\n" +
                "    public static void main(String[] args) {\n" +
                "        SpringApplication.run(" + className + ".class, args);\n" +
                "    }\n" +
                "}";
        writeFile(path + "/" + className + ".java", content);
    }

    private static void createDomainClass(String path, String basePackage, String className, String properties) {
        String content = "package " + basePackage + ".model;\n\n" +
                "import lombok.Data;\n\n@Data\npublic class " + className + " {\n" + properties + "}";
        writeFile(path + "/" + className + ".java", content);
    }

    private static void createRepositoryClass(String path, String basePackage, String className) {
        String content = "package " + basePackage + ".repository;\n\n" +
                "import " + basePackage + ".model." + className + ";\n" +
                "import org.springframework.data.jpa.repository.JpaRepository;\n\n" +
                "public interface " + className + "Repository extends JpaRepository<" + className + ", Long> {\n}";
        writeFile(path + "/" + className + "Repository.java", content);
    }

    private static void createServiceClass(String path, String basePackage, String className) {
        String content = "package " + basePackage + ".service;\n\n" +
                "import org.springframework.stereotype.Service;\n\n" +
                "@Service\n" +
                "public class " + className + "Service {\n}";
        writeFile(path + "/" + className + "Service.java", content);
    }

    private static void createControllerClass(String path, String basePackage, String className) {
        String content = "package " + basePackage + ".controller;\n\n" +
                "import " + basePackage + ".model." + className + ";\n" +
                "import " + basePackage + ".service." + className + "Service;\n" +
                "import org.springframework.beans.factory.annotation.Autowired;\n" +
                "import org.springframework.web.bind.annotation.*;\n\n" +
                "@RestController\n@RequestMapping(\"/api/" + className.toLowerCase() + "\")\n" +
                "public class " + className + "Controller {\n\n" +
                "    private final " + className + "Service service;\n\n" +
                "    @Autowired\n" +
                "    public " + className + "Controller(" + className + "Service service) {\n" +
                "        this.service = service;\n" +
                "    }\n\n" +
                "    @GetMapping\n" +
                "    public String getAll() {\n" +
                "        return \"GET all " + className + "\";\n" +
                "    }\n\n" +
                "    @PostMapping\n" +
                "    public String create(@RequestBody " + className + " obj) {\n" +
                "        return \"POST new " + className + "\";\n" +
                "    }\n\n" +
                "    @PutMapping\n" +
                "    public String update(@RequestBody " + className + " obj) {\n" +
                "        return \"PUT update " + className + "\";\n" +
                "    }\n\n" +
                "    @DeleteMapping\n" +
                "    public String delete() {\n" +
                "        return \"DELETE " + className + "\";\n" +
                "    }\n}";
        writeFile(path + "/" + className + "Controller.java", content);
    }

    private static void createTestClass(String path, String basePackage, String className) {
        String content = "package " + basePackage + ".controller;\n\n" +
                "import org.junit.jupiter.api.Test;\n" +
                "import org.springframework.boot.test.context.SpringBootTest;\n\n" +
                "@SpringBootTest\npublic class " + className + "ControllerTest {\n\n    @Test\n    void contextLoads() {\n        // Basic context load test\n    }\n}";
        writeFile(path + "/" + className + "ControllerTest.java", content);
    }

    private static void writeFile(String filePath, String content) {
        try {
            File file = new File(filePath);
            file.getParentFile().mkdirs(); // Ensure the parent directory exists
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
                writer.write(content);
                System.out.println("Created file: " + filePath);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    private static void createDirectories(String... paths) {
        for (String path : paths) {
            File dir = new File(path);
            if (dir.mkdirs()) System.out.println("Created directory: " + path);
        }
    }
}
